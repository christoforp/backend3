/* eslint-disable linebreak-style */
/* eslint-disable indent */
/* eslint-disable linebreak-style */
/* eslint-disable linebreak-style */
/* eslint-disable linebreak-style */
/* eslint-disable linebreak-style */

const blogsRouter = require('express').Router() // We are creating  router object with "blogsRouter" function and require('express').Router()
const blog = require('../models/blog')
const Blog =  require('../models/blog') // We initalize  variable  "Blog" and taking its models into account.
const User = require('../models/user') // We initialize variable "User" and taking its models into account, So it use things indside of => "models/user.js file"
// We are calling routes eventhandler to controllers So therefore we are using blogsRouter and determining routes.
// We have been moved all defined routes, which are related to blogs in here.
const jwt = require('jsonwebtoken') // We initialize variable "jwt", which require that "jsonwebtoken" library
// We determine blogsRouter eventhandler, which purpose is to get  Router => '/
// We want to that api works for that when it doing HTTP GET request to path =>  "api/users" besides showing its blogs id we want to also show its content
blogsRouter.get('/',  async (request,response ) => {
  const blogs = await Blog.find({}).populate('user' , { username: 1, name:1 }) // We are conducting that joint with mongoose command "populate"
  // As we see that "populate method" is chained after eventhandler function in this case after "find" making the initial query
  // Parameter of populate determine that blogs.id in user field will be replaced with similar document than those.
  // it aplly all values from database and return it back to user.
  // mongooses "populate" function functionality that we are determined reference types with mongoose schema.
   response.json(blogs) // We answering request and express moves it automatically to json mode.
})


//  We determine blogsRouter eventhandler, which purpose is to handle all request and get Router to '/:id', So it handle all request, which are in '/:id' mode for example [1,2,3,4]
blogsRouter.get('/:id',  async(request, response) => {

  const blog = await Blog.findById(request.params.id)// We changes independent blogs review  to mode => "Blog.findById().then({})"
    if(blog) {
      response.json(blog)
    } else {
      response.status(404).end() // Whereas "findById" get wrond id value, then it goes rejected mode. We answering request with response.status(404).end()
    // When "findById" get wrong id value of argument it throws error as result it goes rejected mode  then we using callbackfunction of catch block  => ".catch(error => {next(error))"

  }
})

// We initialize getTokenFrom, which use that "request" callbackfunction.
 const getTokenFrom = request => {
   const authorization = request.get('authorization') // We are defining and initializing "authorization", what "getTokenFrom" using for isolating that token to "authorization" of sending that from browser to server
   if(authorization && authorization.toLowerCase().startsWith('bearer')){ // So We are using that authorization header and its function with "bearer" schema, which is suitable in this case
   // We are sending authorization header to server using "bearer" authorization header
     return  authorization.substring(7) // We are using authorization.substring(7) method to return rest of the content of authorization header
   }

   return null // We retunrn that "null" and empty
  }




// We determine blogsRouter eventhandler, which purpose is to handle all http POST request and get that Router mode '/'
blogsRouter.post('/',  async (request,response) => {
  const getValue= request.body // We initalize variable getValue, which is equal as request.body
  // We initialize token, which is equal as that "getTokenFrom", what we have been defined before this
  const token = getTokenFrom(request) // So its purpose is to use that  helpfunction of "getTokenFrom(request)" for isolate token to authorization header
  const decodedToken = jwt.verify(token, process.env.SECRET) // We are checking validity of token with "jwt.verify" method, which also decode that token or return that object which the token was based on.
// We are verifying that token digitally with using String format from environment variable Secret as the secret.
  if(! decodedToken.id){  // We are using that if condition if there is no any token or decoded code does not contain the user's identity, then we conduct that response in belov
    return response.status(401).json({ error: 'Token missin or invalid' }) // If that if condition is true, then we answer request with statuscode(401) "unauthorized" and reason for failure  is explained as well in response body and terminal
  }
  // We initialize variable user, which get that value and using that function with await syntax method. So we expand our current implementation, So that information about user who have been created that blog is sent in the userfield of the request.body
const user = await User.findById(getValue.userId)
   const blog = new Blog({
    title:  getValue.title,  // So title is  String => getValue.title goes under blogscollection in mongoDB => blogs.title
     author: getValue.author, // So "blogs.author is equal as value of => getValue.author"=> getValue.author  goes under blogscollection in MongoDB => blogs.author
     url:  getValue.url,    // So  "blogs.url is equal as value of getValue.url => getValue.url goes under blogscollection in MongoDB => blogs.url
     likes: getValue.likes,  // So "blogs.likes" is equal as value of => getValue.likes  Number => getValue.likes goes under blogscollection in MongoDB => blogs.likes
     user: user._id  // So "blog.user" is equal as value of =>  "user.id"
  })
// We creating blogs  object with  "Blog" construction function they are like as Javascript object, So they have combination of method that they can save object into database.
  // We answering  request  with save operation  inside  of callback function, For this we make sure that only if operation will success.
   // We are using try and catch method to deal errorhandlers with exception.
    // We initialize variable of "savedBlog", which uses that function with "await" syntax, So it waiting that function => "await.blog.save() is conducted then it return it answer visible. "
    const savedBlog = await blog.save()
 // We are also making changes to "userObject", So the id of blog is saved in the blogs field.
 user.content = user.content.concat(savedBlog._id)
 await user.save() // We conduct that function of "await user.save()", after that we conduct that function in belov.
 response.json(savedBlog.toJSON()) // When that function is implemented and blog is saved into database, then we answer request with json mode.

})

   // "response.json()" purpose is to answer and return that in statuscode(201) and in  json.mode
    // If we trying to add a new Blog, which breaks validation rule, then it throws error. Therefore
    // We are creating similar handler of creating a new blogs, that it can passes any potential exeption to the   "error handler middleware"
   // We are using catch block, which simplify that call for next function => "next"(exceptio // We are using next(exception), which purpose is to move that "exception" to next route or middleware.




blogsRouter.delete('/:id', async(request,response) => {

  await blog.findByIdAndRemove(request.params.id)
response.status(204).end()
})




// We determining and creating that blogsRouter and all routes to own route object as same as in previous section where all routes have been separated to application.
// We are using module.exports that it export that determining route for module user.
// We exporting only one things, So There is only one possible using way that we can use.
module.exports = blogsRouter
