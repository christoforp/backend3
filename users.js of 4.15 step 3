/* eslint-disable linebreak-style */
const bcrypt = require('bcrypt') // We initalize bcrypt, which require that "bcrypt" libary for generating the password hashes
const usersRouter = require('express').Router() // We are creating  router object with "userRouter" function and require('express').Router()
const User = require('../models/user') // We initalize "User", which use things inside of => models/user file

// We are creating  initial Routehandler that return all of the users in database.
usersRouter.get('/', async(request,response) => {
  const users  = await User.find({})
  response.json(users.map(result => result.toJSON()))// We return and answer request with json mode
})



// We don't save request data but function "bcrypt.hash"  to database
// We determine blogsRouter eventhandler, which purpose is to handle all http POST request and get that Router mode '/'
usersRouter.post('/', async  (request,response) => {

  const users = request.body

  const saltRounds = 10 // We initalize "saltRounds", which get that  number value of  magic number  10
  // We initialize passwordHash, which is the output of a one-way hash function applied to the user's password
  const passwordHash = await bcrypt.hash(users.password, saltRounds) // We don't store that password in mongo db database but we store the hash of the password that is generated with "bcrypt.hash" function.
  const user = new User({
    username: users.username,
    name: users.name,
    passwordHash

  })

  // We initalize "savedUser", which get that value and use "await" syntax method to save user to mongoDb database
  // We are creating users  with User construction function  they are like javaScript object So they have combination of method that they can save object in database.
  // answering request with inside of callback function, For this we make sure that only if operation will success.
  const savedUser = await user.save()
  response.status(201).json(savedUser) // We answering resquest with statuscode 201  and response it json mode
})



// We determining and creating that userRouter and all routes to own route object as same as in previous section where all routes have been separated to application.
// We are using module.exports that it export that determining route for module user.
// We exporting only one things, So There is only one possible using way that we can use.
module.exports = usersRouter
